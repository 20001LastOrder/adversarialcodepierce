from acp.samples.java import JavaSample

code_tokens = [
    "private",
    "void",
    "setNodekeyInJsonResponse",
    "(",
    "String",
    "service",
    ")",
    "throws",
    "Exception",
    "{",
    "String",
    "filename",
    "=",
    "this",
    ".",
    "baseDirectory",
    "+",
    "service",
    "+",
    '".json"',
    ";",
    "Scanner",
    "s",
    "=",
    "new",
    "Scanner",
    "(",
    "new",
    "File",
    "(",
    "filename",
    ")",
    ")",
    ";",
    "PrintWriter",
    "fw",
    "=",
    "new",
    "PrintWriter",
    "(",
    "new",
    "File",
    "(",
    "filename",
    "+",
    '".new"',
    ")",
    ")",
    ";",
    "while",
    "(",
    "s",
    ".",
    "hasNextLine",
    "(",
    ")",
    ")",
    "{",
    "fw",
    ".",
    "println",
    "(",
    "s",
    ".",
    "nextLine",
    "(",
    ")",
    ".",
    "replaceAll",
    "(",
    '"NODEKEY"',
    ",",
    "this",
    ".",
    "key",
    ")",
    ")",
    ";",
    "}",
    "s",
    ".",
    "close",
    "(",
    ")",
    ";",
    "fw",
    ".",
    "close",
    "(",
    ")",
    ";",
    "(",
    "new",
    "File",
    "(",
    "filename",
    "+",
    '".new"',
    ")",
    ")",
    ".",
    "renameTo",
    "(",
    "new",
    "File",
    "(",
    "filename",
    ")",
    ")",
    ";",
    "}",
]

java_sample = " ".join(code_tokens)


def test_parse_java():
    sample = JavaSample(code=java_sample, tokenized_code=code_tokens)

    assert len(sample.variables) == 4
    variable_names = set([variable.name for variable in sample.variables])

    assert variable_names == {
        "service",
        "filename",
        "s",
        "fw",
    }
